import React from 'react';
import { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import ThemeService from '../api/ThemeService';
import ThreadService from '../api/ThreadService';

export default function ThreadList() {
  const { name } = useParams(); // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
  // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è id —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä, /theme/123 -> id –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ "123"
  const [theme, setTheme] = useState(null);
  const [threads, setThreads] = useState([]);

  useEffect(() => {
    // –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–µ–º–æ–π
    // –ü—Ä–∏–º–µ—Ä–Ω–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º id
    const getThreads = async () => {
        const data = await ThemeService.getByName(name);
        setTheme(data);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–¥–æ–≤ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
        if (data && data.thread) {
          const threadsArray = [];
          for (let threadItem of data.thread) {
            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–¥–æ–≤ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
            const threadWithMainPost = await ThreadService.getOnlyWithOriginalPost(threadItem.id);
            threadsArray.push(threadWithMainPost);
          }
          setThreads(threadsArray);
        }
    };
    getThreads();
  }, [name]);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–¥–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const removeThreadOnClient = (removeId) => 
    setThreads(threads.filter(({ id }) => id !== removeId));

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –≤ –ë–î –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const handleDelete = async (id) => {
    const isDeleted = await ThreadService.delete(id);
    if (isDeleted) {
      removeThreadOnClient(id);
    }
  }

  const formatDateTime = (dateString) => {
    const options = {
      weekday: 'short',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    };
  
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', options);
  };
  // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç
  // —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  function Threads() {
    return (
      <>
        <h3>{theme && theme.name}</h3>
        <p>{theme && theme.description}</p>
        <ul>
          {threads && threads.map(({id, isPinned, isArchieved, createdAd, post, rating}) => (
              <li key={id}>
                <Link to={`/thread/${id}`}>
                  #{id} 
                </Link> {" "}
                {isPinned ? "üìå" : ""} {" "}
                {isArchieved ? "üóÉÔ∏è" : ""} {" "}
                {post && post[0] && formatDateTime(post[0].createdAt)} {" "}
                
                <button onClick={() => handleDelete(id)}> {" "}
                  –£–¥–∞–ª–∏—Ç—å
                </button>
                <p>{post && post[0] && post[0].title}</p>
              </li>
            ))}
        </ul>
      </>
    );
  }

  return (
    <>
      <Threads />
    </>
  )

};