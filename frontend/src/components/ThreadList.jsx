import React, { useState, useEffect, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { Button, Form, Input, Modal, Typography } from 'antd';
import ThemeService from '../api/ThemeService';
import ThreadService from '../api/ThreadService';
import PostService from '../api/PostService';
import ThreadCreate from './ThreadCreate';
import ThreadListCard from './ThreadListCard';
const {Title} = Typography;

export default function ThreadList({user}) {
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL.  
  // –ù–∞–ø—Ä–∏–º–µ—Ä, /theme/Random -> name –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ "Random"
  const { name } = useParams();

  const [theme, setTheme] = useState(null);
  const [threads, setThreads] = useState([]);
  const [isEditModalOpen, setEditModalOpen] = useState(false);
  const [editThreadOP, setEditThreadOP] = useState(null); // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


  

  const loadThemeAndThreads = useCallback(async () => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ
    const data = await ThemeService.getByName(name);
    setTheme(data);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–¥–æ–≤ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
    if (data && data.thread) {
      const threadsArray = [];
      for (let threadItem of data.thread) {
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–¥–æ–≤ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
        const threadWithMainPost = 
          await ThreadService.getOnlyWithOriginalPost(threadItem.id);
        threadsArray.push(threadWithMainPost);
      }
      setThreads(threadsArray);
    }
  }, [name]);

  useEffect(() => {
    // –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–µ–º–æ–π
    // –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π name
    loadThemeAndThreads();
  }, [name, loadThemeAndThreads]);


  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  // const addThreadOnClient = (newThread) => setThreads([...threads, newThread]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const removeThreadOnClient = (removeId) =>
    setThreads(threads.filter(({ id }) => id !== removeId));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleEditThreadModal = (threadId) => {
    const thread = threads.find((t) => t.id === threadId);
    const post = {
      id: thread.post[0].id,
      threadId: thread.post[0].threadId,
      replyToPostId: thread.post[0].replyToPostId,
      userId: thread.post[0].userId,
      isOriginalPost: thread.post[0].isOriginalPost,
      title: thread.post[0].title,
      text: thread.post[0].text,
      createdAt: thread.post[0].createdAt,
      authorIpAddress: thread.post[0].authorIpAddress,
    }
    setEditThreadOP(post);
    setEditModalOpen(true);
  };

  const handleEditThread = async (values) => {
    const updatedThreadOP = { ...editThreadOP, ...values };
    const isUpdated = await PostService.update(updatedThreadOP);
    if (isUpdated) {
      setThreads(threads.map((thread) => 
        (thread.id === updatedThreadOP.threadId  
          ? {...thread, post: [updatedThreadOP, ...thread.post.slice(1)]} 
          : thread)));
    }
    setEditModalOpen(false);
    setEditThreadOP(null);
  }


  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –≤ –ë–î –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const handleDeleteThread = async (id) => {
    const isDeleted = await ThreadService.delete(id);
    if (isDeleted) {
      removeThreadOnClient(id);
      loadThemeAndThreads();
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
  const handleCancelEdit = () => {
    setEditModalOpen(false);
    setEditThreadOP(null);
  };

  const formatDateTime = (dateString) => {
    const options = {
      weekday: 'short',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    };

    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', options);
  };

  // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç
  // —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  // function Threads() {
  //   return (
  //     <>
  //       <h3>{theme && theme.name}</h3>
  //       <p>{theme && theme.description}</p>
  //       <hr />

  //       {threads && threads.map(({ id, isPinned, isArchived, createdAt, post, user: userAuthor, rating }) => (
  //         <div key={id}>
  //           <Link to={`/theme/${name}/thread/${id}`}>
  //             #{id}
  //           </Link> {" "}
  //           {isPinned ? "üìå " : ""}
  //           {isArchived ? "üóÉÔ∏è " : ""}
  //           {post && post[0] && formatDateTime(createdAt)} {" "}
  //           {userAuthor && userAuthor.userName} {" "}

  //           {user && user.isAuthenticated && (user.userRole === "moderator" || user.userRole === "admin") &&
  //             <button onClick={() => handleDelete(id)}>
  //               ‚ùå
  //             </button>} {" "}
  //           <br />
  //           <strong>{post && post[0] && post[0].title}</strong>
  //           <p>{post && post[0] && post[0].text}</p>
  //           <hr />
  //         </div>
  //       ))}
  //     </>
  //   );
  // }

  function Threads() {
    return (
      <>
        {threads && threads.map(({ id, isPinned, isArchived, createdAt, post, user: userAuthor, rating }) => (
          <ThreadListCard
            key={id}
            metaTitle={
               "#" + id + " " +
              (isPinned ? "üìå " : "") +
              (isArchived ? "üóÉÔ∏è " : "") +
              (post && post[0] && formatDateTime(createdAt)) + " " +
              (userAuthor && userAuthor.userName)
            }
            title={(post && post[0] && post[0].title)}
            description={post && post[0] && post[0].text}
            threadId={id}
            themeName={theme && theme.name}

            user={user}
            onEditModal={handleEditThreadModal}
            onDelete={handleDeleteThread}
          />
        ))}
      </>
    );
  }


  return (
    <>
      <Title>{theme && theme.name}</Title>
      <Title level={3}>{theme && theme.description}</Title>

      {user && user.isAuthenticated && 
      <ThreadCreate updateAllThreads={loadThemeAndThreads} 
                    themeId={theme && theme.id}  
                    userId = {user.id}
                    /> }

      <Threads />

      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–¥"
        open={isEditModalOpen}
        onCancel={handleCancelEdit}
        footer={null}
      >
        <Form
          initialValues={editThreadOP}
          onFinish={handleEditThread}
        >
          <Form.Item
            name="title"
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
            rules={[{ required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–¥–∞' }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="text"
            label="–¢–µ–∫—Å—Ç"
            rules={[{ required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–¥–∞' }]}
          >
            <Input.TextArea />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button onClick={handleCancelEdit} style={{ marginLeft: '10px' }}>
              –û—Ç–º–µ–Ω–∞
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  )
};