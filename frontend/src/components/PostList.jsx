import React, { useState, useEffect, useCallback } from 'react';
import { useParams } from 'react-router-dom';
// HashLink –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è–∫–æ—Ä–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –Ø–∫–æ—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –ø–æ—Å—Ç–∞–º. –°—Å—ã–ª–∫–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∫ –ø–æ—Å—Ç–∞–º –≤–µ–¥—É—Ç –∫ —è–∫–æ—Ä—è–º –ø–æ—Å—Ç–æ–≤
import { HashLink } from 'react-router-hash-link';
import ThreadService from '../api/ThreadService';
import PostService from '../api/PostService';
import PostCreate from './PostCreate';


export default function PostList({user}) {
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
  // name - –∏–º—è —Ç–µ–º—ã, id - ID —Ç—Ä–µ–¥–∞
  const { name: themeName, id: threadId } = useParams(); 

  const [thread, setThread] = useState(null);
  const [originalPost, setOriginalPost] = useState(null);
  const [posts, setPosts] = useState([]);

  const loadThreadAndPosts = useCallback(async () => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–¥–∞.
    // –ü–æ—Å—Ç—ã —Ç—Ä–µ–¥–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —Ç—Ä–µ–¥–µ –≤ –ø–æ–ª–µ "post", –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö. 
    // –ü–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ 
    const threadData = await ThreadService.get(threadId);
    setThread(threadData);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ —Ç—Ä–µ–¥–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –∏–∑ PostService
    const postsData = await PostService.getByThreadId(threadId);
    setPosts(postsData);
    //console.log(posts)      

    const originalPostData = postsData.find(post => post.isOriginalPost);
    setOriginalPost(originalPostData);
    //console.log("originalPost: ", originalPost);
  }, [threadId]);

  useEffect(() => {
    loadThreadAndPosts();
  }, [threadId, loadThreadAndPosts]);


  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  // const updateThePostOnClient = (post) => {
  //   const newPostList = posts.map(p => p.id === post.id ? post : p)
  //   setPosts(newPostList);
  // }

  // –§—É–Ω–∫—Ü–∏—è –¥–∞–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  // const addPostOnClient = (post) => setPosts([...posts, post]);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  // const removePostOnClient = (removeId) => {
  //   setPosts(posts.filter(({ id }) => id !== removeId));
  // }

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ë–î –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const handleDelete = async (id) => {
    const isDeleted = await PostService.delete(id);
    if (isDeleted) {
      //removePostOnClient(id);
      loadThreadAndPosts(); // 
    }
  }

  const formatDateTime = (dateString) => {
    const options = {
      weekday: 'short',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    };

    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', options);
  };


  // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç
  // –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  function Posts() {
    const copyPostId = (postId) => {
      const replyToPostInput = document.querySelector('input[name="replyToPostId"]');
      replyToPostInput.value = postId;
    };

    return (
      <>
        <h3>–¢—Ä–µ–¥ #{thread && thread.id}</h3>
        <hr />

        {/* –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç */}
        <div>
          #{originalPost && originalPost.id} {" "}
          {thread && thread.isPinned ? "üìå" : ""} {" "}
          {thread && thread.isArchived ? "üóÉÔ∏è" : ""} {" "} 
          {/*console.log("originalPost in jsx: ", originalPost)*/}
          {originalPost && formatDateTime(originalPost.createdAt)} {" "}
          {originalPost && originalPost.user && originalPost.user.userName} {" "}

          {user && user.isAuthenticated && 
            <button onClick={() => copyPostId(originalPost && originalPost.id)}>–û—Ç–≤–µ—Ç–∏—Ç—å</button>} {" "}

          <h4>{originalPost && originalPost.title}</h4>
          <p>{originalPost && originalPost.text}</p>
 
          {originalPost && originalPost.inverseReplyToPost 
            && originalPost.inverseReplyToPost.length !== 0 
            && <>–û—Ç–≤–µ—Ç—ã: {" "}</>}
          {originalPost && originalPost.inverseReplyToPost 
            && originalPost.inverseReplyToPost.map(({ id }) => (
              <span key={id}>
                <HashLink to={`/theme/${themeName}/thread/${threadId}#${id}`}>
                  #{id} {" "}
                </HashLink>
              </span>
          ))}

          <hr />
        </div>
        
        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
        {posts && posts
          .filter(post => !post.isOriginalPost)
          .map(({ id: postId, title, text, createdAt, user: userAuthor, inverseReplyToPost }) => ( 
            <div key={postId} id={postId}>
              #{postId} {" "}
              {formatDateTime(createdAt)} {" "}
              {userAuthor && userAuthor.userName} {" "}

              {user && user.isAuthenticated &&
                <button onClick={() => copyPostId(postId)}>–û—Ç–≤–µ—Ç–∏—Ç—å</button>} {" "}
              {user && user.isAuthenticated && (user.userRole === "moderator" || user.userRole === "admin") &&
                <button onClick={() => handleDelete(postId)}>–£–¥–∞–ª–∏—Ç—å</button>} {" "}

              <h4>{title}</h4>
              <p>{text}</p>
              
              {inverseReplyToPost.length !== 0 && <>–û—Ç–≤–µ—Ç—ã: {" "}</>} 
              {inverseReplyToPost.map(({ id }) => (
                  <span key={id}>
                    <HashLink to={`/theme/${themeName}/thread/${threadId}#${id}`}> 
                      #{id} {" "}
                    </HashLink>
                  </span>
              ))}

              <hr />
            </div>
          ))}
      </>
    )
  }

  return (
    <>
      <Posts />
      {user && user.isAuthenticated &&
        <PostCreate undateAllPosts={loadThreadAndPosts} threadId={threadId} userId={user.id}/>}
    </>
  )
}